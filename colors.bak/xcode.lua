-- Made with 'mini.colors' module of https://github.com/echasnovski/mini.nvim

if vim.g.colors_name ~= nil then vim.cmd('highlight clear') end
vim.g.colors_name = "xcode"

-- Highlight groups
local hi = vim.api.nvim_set_hl

local bg_normal = "#ffffff"
local bg_pmenu = "#f4f4f4"
local bg_search_pmenuthumb = "#e5e5e5"

local bg_cursorcolumn_cursorline_cursorlinenr = "#ecf5ff"
local bg_visual = "#b4d8fd"

local bg_diffadd = "#edfff0"
local bg_diffdelete = "#fef0f1"
local bg_difftext = "#fdfae6"

local bg_incsearch_matchparen = "#fef869"
local bg_sel = "#156adf"


local fg_char_number = "#272ad8"
local fg_comment = "#8a99a6"
local fg_conceal_linenr_nontext = "#cdcdcd"
local fg_delimiter_operator = "#5c6873"
local fg_directory_link_function_identifier_def = "#0f68a0"
local fg_function_constant = "#804fb8"
local fg_gitsigns_all = "#34537e"
local fg_identifier = "#3e8087"
local fg_normal = "#262626"
local fg_preproc_warningmsg = "#78492a"
local fg_signify = "#69a7fc"
local fg_special = "#23575c"
local fg_statement_prompt = "#ad3da4"
local fg_string_errormsg = "#d12f1b"
local fg_type = "#4b21b0"
local fg_typedef = "#0b4f79"

-- [colors.primary]
-- foreground = "#262626"
-- background = "#ffffff"
--
-- [colors.normal]
-- black = "#b4d8fd"
-- red = "#d12f1b"
-- green = "#3e8087"
-- yellow = "#78492a"
-- blue = "#0f68a0"
-- magenta = "#ad3da4"
-- cyan = "#804fb8"
-- white = "#262626"
--
-- [colors.bright]
-- black = "#8a99a6"
-- red = "#d12f1b"
-- green = "#23575c"
-- yellow = "#78492a"
-- blue = "#0b4f79"
-- magenta = "#ad3da4"
-- cyan = "#4b21b0"
-- white = "#262626"

hi(0, "@HlargsNamedParams", { link = "Hlargs" })
hi(0, "ALEVirtualTextError", { link = "ErrorMsg" })
hi(0, "ALEVirtualTextWarning", { link = "WarningMsg" })
hi(0, "Boolean", { link = "Statement" })
hi(0, "Character", { fg = fg_char_number })
hi(0, "CmpItemAbbrDefault", { fg = fg_normal })
hi(0, "CmpItemAbbrDeprecatedDefault", { fg = fg_comment })
hi(0, "CmpItemAbbrMatchDefault", { fg = fg_normal })
hi(0, "CmpItemAbbrMatchFuzzyDefault", { fg = fg_normal })
hi(0, "CmpItemKindClassDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindColorDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindConstantDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindConstructorDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindDefault", { fg = fg_special })
hi(0, "CmpItemKindEnumDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindEnumMemberDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindEventDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFieldDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFileDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFolderDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFunctionDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindInterfaceDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindKeywordDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindMethodDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindModuleDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindOperatorDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindPropertyDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindReferenceDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindSnippetDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindStructDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindTextDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindTypeParameterDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindUnitDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindValueDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindVariableDefault", { link = "CmpItemKind" })
hi(0, "CmpItemMenuDefault", { fg = fg_normal })
hi(0, "ColorColumn", { bg = bg_pmenu })
hi(0, "Comment", { fg = fg_comment })
hi(0, "Conceal", { fg = fg_conceal_linenr_nontext })
hi(0, "Constant", { fg = fg_function_constant })
hi(0, "Cursor", { bg = fg_normal, fg = bg_normal })
hi(0, "CursorColumn", { bg = bg_cursorcolumn_cursorline_cursorlinenr })
hi(0, "CursorLine", { bg = bg_cursorcolumn_cursorline_cursorlinenr })
hi(0, "CursorLineNr", { bg = bg_cursorcolumn_cursorline_cursorlinenr, fg = fg_normal })
hi(0, "Delimiter", { fg = fg_delimiter_operator })
hi(0, "DiffAdd", { bg = bg_diffadd, ctermbg = 2, ctermfg = 15 })
hi(0, "DiffChange", {})
hi(0, "DiffDelete", { bg = bg_diffdelete, ctermfg = 1 })
hi(0, "DiffText", { bg = bg_difftext, ctermbg = 6, ctermfg = 15 })
hi(0, "DiffviewDiffAddAsDelete", { bg = bg_diffdelete })
hi(0, "DiffviewDim1", { fg = fg_comment })
hi(0, "DiffviewFilePanelCounter", { bold = true, fg = fg_identifier })
hi(0, "DiffviewFilePanelFileName", { fg = fg_normal })
hi(0, "DiffviewFilePanelTitle", { bold = true, fg = fg_statement_prompt })
hi(0, "DiffviewPrimary", { fg = fg_function_constant })
hi(0, "DiffviewSecondary", { fg = fg_string_errormsg })
hi(0, "Directory", { ctermfg = 6, fg = fg_directory_link_function_identifier_def })
hi(0, "EndOfBuffer", { bg = bg_normal, fg = bg_normal })
hi(0, "Error", { bg = fg_string_errormsg, ctermbg = 1, ctermfg = 15, fg = bg_normal })
hi(0, "ErrorMsg", { ctermfg = 1, fg = fg_string_errormsg })
hi(0, "FoldColumn", { fg = fg_conceal_linenr_nontext })
hi(0, "Folded", { bg = bg_search_pmenuthumb, fg = fg_comment })
hi(0, "Function", { fg = fg_function_constant })
hi(0, "FunctionDef", { fg = fg_directory_link_function_identifier_def })
hi(0, "GitSignsStagedAdd", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedAddCul", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedAddLn", { bg = bg_diffadd })
hi(0, "GitSignsStagedAddNr", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedChange", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedChangeCul", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedChangeNr", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedChangedelete", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedChangedeleteCul", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedChangedeleteNr", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedDelete", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedDeleteCul", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedDeleteNr", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedTopdelete", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedTopdeleteCul", { fg = fg_gitsigns_all })
hi(0, "GitSignsStagedTopdeleteNr", { fg = fg_gitsigns_all })
hi(0, "Identifier", { fg = fg_identifier })
hi(0, "IdentifierDef", { fg = fg_directory_link_function_identifier_def })
hi(0, "Ignore", { fg = fg_conceal_linenr_nontext })
hi(0, "IlluminatedWordRead", { underline = true })
hi(0, "IlluminatedWordText", { underline = true })
hi(0, "IlluminatedWordWrite", { underline = true })
hi(0, "IncSearch", { bg = bg_incsearch_matchparen, fg = fg_normal })
hi(0, "Include", { link = "Statement" })
hi(0, "LibraryFunc", { fg = fg_function_constant })
hi(0, "LibraryIdent", { fg = fg_function_constant })
hi(0, "LibraryType", { fg = fg_type })
hi(0, "LineNr", { fg = fg_conceal_linenr_nontext })
hi(0, "LocalFunc", { fg = fg_identifier })
hi(0, "LocalIdent", { fg = fg_identifier })
hi(0, "LocalType", { fg = fg_special })
hi(0, "MatchParen", { bg = bg_incsearch_matchparen, fg = fg_normal })
hi(0, "MatchWord", { bg = bg_sel, fg = bg_normal })
hi(0, "ModeMsg", { ctermfg = 2, fg = fg_comment })
hi(0, "MoreMsg", { ctermfg = 6, fg = fg_statement_prompt })
hi(0, "MsgArea", { link = "Title" })
hi(0, "Noise", { link = "Delimiter" })
hi(0, "NonText", { fg = fg_conceal_linenr_nontext })
hi(0, "None", { fg = fg_normal })
hi(0, "Normal", { bg = bg_normal, fg = fg_normal })
hi(0, "Number", { fg = fg_char_number })
hi(0, "Operator", { fg = fg_delimiter_operator })
hi(0, "Pmenu", { bg = bg_pmenu, fg = fg_normal })
hi(0, "PmenuSbar", { bg = bg_pmenu, fg = bg_pmenu })
hi(0, "PmenuSel", { bg = bg_sel, blend = 0, fg = bg_normal })
hi(0, "PmenuThumb", { bg = bg_search_pmenuthumb, fg = bg_search_pmenuthumb })
hi(0, "PreProc", { fg = fg_preproc_warningmsg })
hi(0, "Question", { ctermfg = 6, fg = fg_statement_prompt })
hi(0, "QuickFixLine", { bg = bg_sel, ctermfg = 6, fg = bg_normal })
hi(0, "Quote", { link = "StringDelimiter" })
hi(0, "Search", { bg = bg_search_pmenuthumb, ctermbg = 3, ctermfg = 15, fg = fg_normal })
hi(0, "Searchlight", { link = "IncSearch" })
hi(0, "SignColumn", { fg = fg_conceal_linenr_nontext })
hi(0, "Signify", { fg = fg_signify })
hi(0, "SignifySignAdd", { link = "Signify" })
hi(0, "SignifySignChange", { link = "Signify" })
hi(0, "SignifySignDelete", { link = "Signify" })
hi(0, "Special", { ctermfg = 6, fg = fg_special })
hi(0, "SpecialComment", { fg = fg_delimiter_operator })
hi(0, "SpecialKey", { fg = fg_conceal_linenr_nontext })
hi(0, "Statement", { bold = true, fg = fg_statement_prompt })
hi(0, "StatusLine", { bg = bg_search_pmenuthumb, fg = fg_normal })
hi(0, "StatusLineNC", { bg = bg_pmenu, fg = fg_normal })
hi(0, "StatusLineTerm", { link = "StatusLine" })
hi(0, "StatusLineTermNC", { link = "StatusLineNC" })
hi(0, "Stl262626_e5e5e5__", { bg = bg_search_pmenuthumb, fg = fg_normal })
hi(0, "StorageClass", { link = "Statement" })
hi(0, "String", { ctermfg = 2, fg = fg_string_errormsg })
hi(0, "StringDelimiter", { link = "String" })
hi(0, "Structure", { link = "Statement" })
hi(0, "TabLineFill", { link = "StatusLineNC" })
hi(0, "TabLineSel", { bg = bg_search_pmenuthumb, fg = fg_normal })
hi(0, "Terminal", { link = "Normal" })
hi(0, "Title", { bold = true, fg = fg_normal })
hi(0, "Todo", { bold = true, fg = fg_delimiter_operator })
hi(0, "Type", { fg = fg_type })
hi(0, "Typedef", { fg = fg_typedef })
hi(0, "Underlined", { fg = fg_directory_link_function_identifier_def, underline = true })
hi(0, "VertSplit", { bg = bg_pmenu, fg = bg_pmenu })
hi(0, "Visual", { bg = bg_visual, ctermbg = 0, ctermfg = 15 })
hi(0, "WarningMsg", { ctermfg = 3, fg = fg_preproc_warningmsg })
hi(0, "Whitespace", { link = "Ignore" })
hi(0, "WildMenu", { bg = bg_sel, fg = bg_normal })
hi(0, "bibEntryKw", { link = "LibraryIdent" })
hi(0, "bibKey", { link = "IdentifierDef" })
hi(0, "bibType", { link = "LibraryType" })
hi(0, "cssAtRule", { link = "Keyword" })
hi(0, "cssAttr", { link = "Keyword" })
hi(0, "cssBraces", { link = "cssNoise" })
hi(0, "cssClassName", { link = "LocalIdent" })
hi(0, "cssColor", { link = "cssAttr" })
hi(0, "cssFunction", { link = "None" })
hi(0, "cssIdentifier", { link = "LocalIdent" })
hi(0, "cssProp", { link = "LibraryType" })
hi(0, "cssPseudoClassId", { link = "LibraryIdent" })
hi(0, "cssSelectorOp", { link = "Operator" })
hi(0, "diffAdded", { link = "DiffAdd" })
hi(0, "diffBDiffer", { link = "WarningMsg" })
hi(0, "diffChanged", { link = "DiffChange" })
hi(0, "diffCommon", { link = "WarningMsg" })
hi(0, "diffDiffer", { link = "WarningMsg" })
hi(0, "diffFile", { link = "Directory" })
hi(0, "diffIdentical", { link = "WarningMsg" })
hi(0, "diffIndexLine", { link = "Number" })
hi(0, "diffIsA", { link = "WarningMsg" })
hi(0, "diffNoEOL", { link = "WarningMsg" })
hi(0, "diffOnly", { link = "WarningMsg" })
hi(0, "diffRemoved", { link = "DiffDelete" })
hi(0, "gitcommitHeader", { link = "Todo" })
hi(0, "gitcommitOverflow", { link = "Error" })
hi(0, "gitcommitSummary", { link = "Title" })
hi(0, "goField", { link = "LocalIdent" })
hi(0, "goFunction", { link = "FunctionDef" })
hi(0, "goFunctionCall", { link = "LibraryFunc" })
hi(0, "goVarAssign", { link = "LocalIdent" })
hi(0, "goVarDefs", { link = "IdentifierDef" })
hi(0, "helpCommand", { link = "helpExample" })
hi(0, "helpExample", { link = "markdownCode" })
hi(0, "helpHeadline", { link = "Title" })
hi(0, "helpHyperTextEntry", { link = "Comment" })
hi(0, "helpHyperTextJump", { link = "Underlined" })
hi(0, "helpSectionDelim", { link = "Ignore" })
hi(0, "helpURL", { link = "helpHyperTextJump" })
hi(0, "helpVim", { link = "Title" })
hi(0, "htmlArg", { link = "Special" })
hi(0, "htmlEndTag", { link = "Delimiter" })
hi(0, "htmlLink", { link = "Underlined" })
hi(0, "htmlSpecialTagName", { link = "htmlTagName" })
hi(0, "htmlTag", { link = "Delimiter" })
hi(0, "htmlTagName", { link = "Statement" })
hi(0, "jinjaBlockName", { link = "Typedef" })
hi(0, "jinjaFilter", { link = "LibraryFunc" })
hi(0, "jinjaNumber", { link = "Number" })
hi(0, "jinjaOperator", { link = "Operator" })
hi(0, "jinjaRawDelim", { link = "PreProc" })
hi(0, "jinjaSpecial", { link = "Keyword" })
hi(0, "jinjaString", { link = "String" })
hi(0, "jinjaTagDelim", { link = "Delimiter" })
hi(0, "jinjaVarDelim", { link = "Delimiter" })
hi(0, "jsBuiltins", { link = "LibraryFunc" })
hi(0, "jsClassDefinition", { link = "Typedef" })
hi(0, "jsDomErrNo", { link = "LibraryIdent" })
hi(0, "jsDomNodeConsts", { link = "LibraryIdent" })
hi(0, "jsExceptions", { link = "LibraryType" })
hi(0, "jsFuncArgCommas", { link = "jsNoise" })
hi(0, "jsFuncName", { link = "FunctionDef" })
hi(0, "jsFunction", { link = "jsStatement" })
hi(0, "jsGlobalNodeObjects", { link = "jsGlobalObjects" })
hi(0, "jsGlobalObjects", { link = "LibraryType" })
hi(0, "jsObjectProp", { link = "LocalIdent" })
hi(0, "jsOperatorKeyword", { link = "jsStatement" })
hi(0, "jsThis", { link = "jsStatement" })
hi(0, "jsVariableDef", { link = "IdentifierDef" })
hi(0, "jsonKeyword", { link = "jsonString" })
hi(0, "jsonKeywordMatch", { link = "Operator" })
hi(0, "jsonQuote", { link = "StringDelimiter" })
hi(0, "lCursor", { bg = fg_normal, fg = bg_normal })
hi(0, "markdownBoldDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownBoldItalicDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownCode", { bg = bg_pmenu, fg = fg_function_constant })
hi(0, "markdownCodeBlock", { link = "markdownCode" })
hi(0, "markdownCodeDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownDelimiter", { fg = fg_identifier })
hi(0, "markdownHeadingDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownItalicDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownLinkDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownLinkText", { link = "None" })
hi(0, "markdownLinkTextDelimiter", { link = "markdownDelimiter" })
hi(0, "markdownListMarker", { link = "markdownDelimiter" })
hi(0, "markdownRule", { link = "markdownDelimiter" })
hi(0, "markdownUrl", { link = "Underlined" })
hi(0, "rsForeignConst", { link = "LibraryIdent" })
hi(0, "rsForeignFunc", { link = "LibraryFunc" })
hi(0, "rsForeignType", { link = "LibraryType" })
hi(0, "rsFuncDef", { link = "FunctionDef" })
hi(0, "rsIdentDef", { link = "IdentifierDef" })
hi(0, "rsLibraryConst", { link = "LibraryIdent" })
hi(0, "rsLibraryFunc", { link = "LibraryFunc" })
hi(0, "rsLibraryType", { link = "LibraryType" })
hi(0, "rsLifetimeDef", { link = "IdentifierDef" })
hi(0, "rsSpecialLifetime", { link = "LibraryIdent" })
hi(0, "rsUserConst", { link = "LocalIdent" })
hi(0, "rsUserFunc", { link = "LocalFunc" })
hi(0, "rsUserLifetime", { link = "LocalIdent" })
hi(0, "rsUserMethod", { link = "LibraryFunc" })
hi(0, "rsUserType", { link = "LocalType" })
hi(0, "scssAttribute", { link = "cssNoise" })
hi(0, "scssInclude", { link = "Keyword" })
hi(0, "scssMixin", { link = "Keyword" })
hi(0, "scssMixinName", { link = "LocalFunc" })
hi(0, "scssMixinParams", { link = "cssNoise" })
hi(0, "scssSelectorName", { link = "cssClassName" })
hi(0, "scssVariableAssignment", { link = "Operator" })
hi(0, "scssVariableValue", { link = "Operator" })
hi(0, "swiftFuncDef", { link = "FunctionDef" })
hi(0, "swiftIdentDef", { link = "IdentifierDef" })
hi(0, "swiftLibraryFunc", { link = "LibraryFunc" })
hi(0, "swiftLibraryProp", { link = "LibraryIdent" })
hi(0, "swiftLibraryType", { link = "LibraryType" })
hi(0, "swiftUserFunc", { link = "LocalFunc" })
hi(0, "swiftUserProp", { link = "LocalIdent" })
hi(0, "swiftUserType", { link = "LocalType" })
hi(0, "typescriptArrayMethod", { link = "LibraryFunc" })
hi(0, "typescriptArrowFunc", { link = "Operator" })
hi(0, "typescriptAssign", { link = "Operator" })
hi(0, "typescriptBOM", { link = "LibraryType" })
hi(0, "typescriptBOMWindowCons", { link = "LibraryType" })
hi(0, "typescriptBOMWindowMethod", { link = "LibraryFunc" })
hi(0, "typescriptBOMWindowProp", { link = "LibraryType" })
hi(0, "typescriptBinaryOp", { link = "Operator" })
hi(0, "typescriptBraces", { link = "Delimiter" })
hi(0, "typescriptCall", { link = "None" })
hi(0, "typescriptClassHeritage", { link = "Type" })
hi(0, "typescriptClassName", { link = "Typedef" })
hi(0, "typescriptDOMDocMethod", { link = "LibraryFunc" })
hi(0, "typescriptDOMDocProp", { link = "LibraryIdent" })
hi(0, "typescriptDOMEventCons", { link = "LibraryType" })
hi(0, "typescriptDOMEventMethod", { link = "LibraryFunc" })
hi(0, "typescriptDOMEventProp", { link = "LibraryIdent" })
hi(0, "typescriptDOMEventTargetMethod", { link = "LibraryFunc" })
hi(0, "typescriptDOMNodeMethod", { link = "LibraryFunc" })
hi(0, "typescriptDOMStorageMethod", { link = "LibraryIdent" })
hi(0, "typescriptEndColons", { link = "Delimiter" })
hi(0, "typescriptExport", { link = "Keyword" })
hi(0, "typescriptFuncName", { link = "FunctionDef" })
hi(0, "typescriptFuncTypeArrow", { link = "typescriptArrowFunc" })
hi(0, "typescriptGlobal", { link = "typescriptPredefinedType" })
hi(0, "typescriptIdentifier", { link = "Keyword" })
hi(0, "typescriptInterfaceName", { link = "Typedef" })
hi(0, "typescriptMember", { link = "LocalFunc" })
hi(0, "typescriptObjectLabel", { link = "LocalIdent" })
hi(0, "typescriptOperator", { link = "Keyword" })
hi(0, "typescriptParens", { link = "Delimiter" })
hi(0, "typescriptPredefinedType", { link = "LibraryType" })
hi(0, "typescriptTypeAnnotation", { link = "Delimiter" })
hi(0, "typescriptTypeReference", { link = "typescriptUserDefinedType" })
hi(0, "typescriptUserDefinedType", { link = "LocalType" })
hi(0, "typescriptVariable", { link = "Keyword" })
hi(0, "typescriptVariableDeclaration", { link = "IdentifierDef" })
hi(0, "vimAutoCmdSfxList", { link = "LibraryType" })
hi(0, "vimAutoEventList", { link = "LocalIdent" })
hi(0, "vimCmdSep", { link = "Special" })
hi(0, "vimCommentTitle", { link = "SpecialComment" })
hi(0, "vimContinue", { link = "Delimiter" })
hi(0, "vimFuncName", { link = "LibraryFunc" })
hi(0, "vimFunction", { link = "FunctionDef" })
hi(0, "vimHighlight", { link = "Statement" })
hi(0, "vimMapModKey", { link = "vimNotation" })
hi(0, "vimNotation", { link = "LibraryType" })
hi(0, "vimOption", { link = "LibraryIdent" })
hi(0, "vimUserFunc", { link = "LocalFunc" })
