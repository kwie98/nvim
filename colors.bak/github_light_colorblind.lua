-- Made with 'mini.colors' module of https://github.com/echasnovski/mini.nvim

if vim.g.colors_name ~= nil then vim.cmd("highlight clear") end
vim.g.colors_name = "github_light_colorblind"

-- Highlight groups
local hi = vim.api.nvim_set_hl

local c = {}
c.bg0 = "#ffffff"
c.bg1 = "#f6f8fa"
c.bg2 = "#dae9f9"
c.bg3 = "#f1f1f2"
c.bg4 = "#e7eaf0"
c.error = "#d1242f"
c.hint = "#d0d7de"
c.info = "#0969da"
c.warning = "#9a6700"
c.blue = "#0550ae"
c.directory = "#6639ba"
c.dark_blue = "#0a3069"
c.red = "#8a4600"
c.keyword = "#b35900"
c.fg = "#1b1f24"
c.gray = "#57606a"
c.dark_gray = "#32383f"
c.added = "#b4cbe7"
c.changed = "#d8cab3"
c.deprecated = "#6f3800"
c.purple = "#8250df"
c.conceal = "#6e7781"
c.cyan = "#1b7c83"
c.hlargs = "#ef9062"
c.orange = "#f79939"
c.removed = "#dcc8b3"

hi(0, "@HlargsNamedParams", { link = "Hlargs" })
hi(0, "@attribute", { link = "Constant" })
hi(0, "@comment.error", { bg = c.error, fg = c.bg0 })
hi(0, "@comment.hint", { bg = c.hint, fg = c.bg0 })
hi(0, "@comment.info", { bg = c.info, fg = c.bg0 })
hi(0, "@comment.todo", { bg = c.hint, fg = c.bg0 })
hi(0, "@comment.warning", { bg = c.warning, fg = c.bg0 })
hi(0, "@conceal", { link = "Conceal" })
hi(0, "@constant.builtin", { fg = c.blue })
hi(0, "@constant.builtin.rust", { fg = c.red })
hi(0, "@constant.html", { link = "@tag" })
hi(0, "@constant.macro", { link = "Macro" })
hi(0, "@constructor", { fg = c.red })
hi(0, "@constructor.lua", { fg = c.fg })
hi(0, "@diff.delta", { link = "diffChanged" })
hi(0, "@diff.minus", { link = "diffRemoved" })
hi(0, "@diff.plus", { link = "diffAdded" })
hi(0, "@function.builtin", {})
hi(0, "@function.builtin.bash", { fg = c.keyword })
hi(0, "@function.builtin.lua", { fg = c.blue })
hi(0, "@function.builtin.make", { link = "@constant" })
hi(0, "@function.call.bash", { fg = c.blue })
hi(0, "@keyword.directive.rust", { fg = c.blue })
hi(0, "@keyword.exception", { fg = c.blue })
hi(0, "@keyword.function", { fg = c.keyword })
hi(0, "@keyword.operator", { fg = c.keyword })
hi(0, "@keyword.storage.lifetime.punctuation.rust", { link = "@markup.list.rust" })
hi(0, "@keyword.storage.lifetime.rust", { link = "@tag.rust" })
hi(0, "@label", { link = "@tag" })
hi(0, "@label.ruby", { fg = c.blue })
hi(0, "@label.vimdoc", { link = "@keyword" })
hi(0, "@lsp.type.class", { link = "@function" })
hi(0, "@lsp.type.enum", { link = "@type" })
hi(0, "@lsp.type.interface", { link = "@interface" })
hi(0, "@lsp.type.keyword", { link = "@keyword" })
hi(0, "@lsp.type.namespace", { link = "@namespace" })
hi(0, "@lsp.type.parameter", { link = "@variable.parameter" })
hi(0, "@lsp.type.property", {})
hi(0, "@lsp.type.variable", {})
hi(0, "@lsp.type.variable.lua", {})
hi(0, "@lsp.typemod.function.defaultLibrary", { link = "@function.builtin" })
hi(0, "@lsp.typemod.method.defaultLibrary", { link = "@function.builtin" })
hi(0, "@lsp.typemod.operator.injected", { link = "@operator" })
hi(0, "@lsp.typemod.string.injected", { link = "@string" })
hi(0, "@lsp.typemod.variable.defaultLibrary", { link = "@variable.builtin" })
hi(0, "@lsp.typemod.variable.injected", { link = "@variable" })
hi(0, "@markup.environment", { fg = c.keyword })
hi(0, "@markup.environment.name", { fg = c.directory })
hi(0, "@markup.heading.html", { fg = c.fg })
hi(0, "@markup.italic", { fg = c.fg, italic = true })
hi(0, "@markup.link", { fg = c.fg, underline = true })
hi(0, "@markup.link.label", { link = "Special" })
hi(0, "@markup.link.uri", { fg = c.blue, italic = true, underline = true })
hi(0, "@markup.list", { fg = c.blue })
hi(0, "@markup.list.bash", { link = "@punctuation.bash" })
hi(0, "@markup.list.checked", { fg = c.blue })
hi(0, "@markup.list.luadoc", { fg = c.fg })
hi(0, "@markup.list.unchecked", { fg = c.gray })
hi(0, "@markup.quote.markdown", { fg = c.blue })
hi(0, "@markup.raw", { fg = c.fg, italic = true })
hi(0, "@markup.strikethrough", { fg = c.fg, strikethrough = true })
hi(0, "@markup.strong", { bold = true, fg = c.fg })
hi(0, "@module", { fg = c.keyword })
hi(0, "@module.builtin", { fg = c.blue })
hi(0, "@module.builtin.lua", { fg = c.blue })
hi(0, "@module.c_sharp", { fg = c.red })
hi(0, "@module.go", {})
hi(0, "@module.php", { link = "@constructor.php" })
hi(0, "@module.rust", {})
hi(0, "@none", { link = "NONE" })
hi(0, "@number.bash", {})
hi(0, "@operator.bash", { fg = c.keyword })
hi(0, "@operator.lua", { fg = c.keyword })
hi(0, "@operator.luadoc", { fg = c.fg })
hi(0, "@property", { link = "@variable.member" })
hi(0, "@property.json", { link = "@tag" })
hi(0, "@property.lua", { fg = c.fg })
hi(0, "@property.luadoc", { link = "@property.lua" })
hi(0, "@property.scss", { link = "@constant" })
hi(0, "@property.yaml", { link = "@tag" })
hi(0, "@punctuation.bracket", { fg = c.fg })
hi(0, "@punctuation.delimiter.bash", { fg = c.keyword })
hi(0, "@punctuation.delimiter.markdown", { fg = c.fg })
hi(0, "@punctuation.delimiter.markdown_inline", { fg = c.fg })
hi(0, "@string.escape", { bold = true, fg = c.dark_blue })
hi(0, "@string.regexp", { fg = c.dark_blue })
hi(0, "@string.special.path.gitignore", { fg = c.directory })
hi(0, "@string.special.path.nix", { link = "@string" })
hi(0, "@string.special.symbol", { fg = c.keyword })
hi(0, "@string.special.symbol.make", { link = "@function" })
hi(0, "@string.special.symbol.ruby", { link = "@constant" })
hi(0, "@string.special.url", { fg = c.blue, italic = true, underline = true })
hi(0, "@tag", { fg = c.blue })
hi(0, "@tag.attribute", { link = "@variable.member" })
hi(0, "@tag.builtin", { link = "@tag" })
hi(0, "@tag.delimiter", {})
hi(0, "@tag.delimiter.javascript", { link = "@tag.attribute.javascript" })
hi(0, "@tag.delimiter.tsx", { link = "@tag.attribute.tsx" })
hi(0, "@tag.javascript", { link = "@type.javascript" })
hi(0, "@tag.tsx", { link = "@type.tsx" })
hi(0, "@type", { fg = c.red })
hi(0, "@type.builtin", { fg = c.keyword })
hi(0, "@type.builtin.python", { link = "@constant" })
hi(0, "@type.c", {})
hi(0, "@type.css", { link = "htmlTag" })
hi(0, "@type.qualifier", { fg = c.keyword })
hi(0, "@type.sql", { link = "@variable" })
hi(0, "@variable", { fg = c.fg })
hi(0, "@variable.builtin", { fg = c.blue })
hi(0, "@variable.builtin.python", { link = "@constant" })
hi(0, "@variable.member", { fg = c.blue })
hi(0, "@variable.member.luadoc", { link = "@property.luadoc" })
hi(0, "@variable.member.nix", { link = "@variable.member" })
hi(0, "@variable.member.python", { fg = c.fg })
hi(0, "@variable.member.sql", { link = "@constant" })
hi(0, "@variable.parameter", { fg = c.fg })
hi(0, "@variable.parameter.builtin", { fg = c.blue })
hi(0, "@variable.parameter.nix", { link = "@variable.parameter" })
hi(0, "@variable.parameter.vimdoc", { fg = c.red })
hi(0, "@variable.scss", { link = "@variable.parameter" })
hi(0, "@variable.sql", { link = "@constant" })
hi(0, "Added", { bg = c.added, fg = c.info })
hi(0, "Bold", { bold = true })
hi(0, "Boolean", { link = "Number" })
hi(0, "Changed", { bg = c.changed, fg = c.warning })
hi(0, "Character", { link = "String" })
hi(0, "ColorColumn", { bg = c.bg3 })
hi(0, "Comment", { fg = c.gray, nocombine = true })
hi(0, "Conceal", { fg = c.conceal })
hi(0, "Conditional", { fg = c.keyword })
hi(0, "Constant", { fg = c.blue })
hi(0, "CurSearch", { link = "IncSearch" })
hi(0, "Cursor", { bg = c.fg, fg = c.bg0 })
hi(0, "CursorColumn", { link = "CursorLine" })
hi(0, "CursorLine", { bg = c.bg4 })
hi(0, "CursorLineNr", { fg = c.fg })
hi(0, "Delimiter", { link = "Special" })
hi(0, "DiagnosticError", { fg = c.error })
hi(0, "DiagnosticHint", { fg = c.hint })
hi(0, "DiagnosticInfo", { fg = c.info })
hi(0, "DiagnosticUnderlineError", { sp = c.error, undercurl = true })
hi(0, "DiagnosticUnderlineHint", { sp = c.hint, undercurl = true })
hi(0, "DiagnosticUnderlineInfo", { sp = c.info, undercurl = true })
hi(0, "DiagnosticUnderlineWarn", { sp = c.warning, undercurl = true })
hi(0, "DiagnosticVirtualTextError", { fg = c.error })
hi(0, "DiagnosticVirtualTextHint", { fg = c.hint })
hi(0, "DiagnosticVirtualTextInfo", { fg = c.info })
hi(0, "DiagnosticVirtualTextWarn", { fg = c.warning })
hi(0, "DiagnosticWarn", { fg = c.warning })
hi(0, "DiffAdd", { link = "diffAdded" })
hi(0, "DiffChange", { link = "diffChanged" })
hi(0, "DiffDelete", { bg = c.removed })
hi(0, "DiffText", { bg = c.bg3, fg = c.fg })
hi(0, "DiffviewDim1", { fg = c.gray })
hi(0, "DiffviewFilePanelCounter", { bold = true, fg = c.fg })
hi(0, "DiffviewFilePanelFileName", { fg = c.fg })
hi(0, "DiffviewFilePanelTitle", { bold = true, fg = c.keyword })
hi(0, "DiffviewPrimary", { fg = c.directory })
hi(0, "DiffviewSecondary", { fg = c.dark_blue })
hi(0, "Directory", { fg = c.directory })
hi(0, "EndOfBuffer", { fg = c.bg0 })
hi(0, "Error", { fg = c.error })
hi(0, "ErrorMsg", { fg = c.error })
hi(0, "Exception", { link = "Keyword" })
hi(0, "FidgetTask", { link = "LineNr" })
hi(0, "FidgetTitle", { link = "Title" })
hi(0, "FloatBorder", { fg = c.hint })
hi(0, "FoldColumn", { fg = c.gray })
hi(0, "Folded", { bg = c.bg3, fg = c.gray })
hi(0, "Function", { fg = c.directory })
hi(0, "GitSignsAdd", { fg = c.info })
hi(0, "GitSignsChange", { fg = c.warning })
hi(0, "GitSignsDelete", { fg = c.error })
hi(0, "GitSignsStagedAdd", { fg = "#04346d" })
hi(0, "GitSignsStagedAddCul", { fg = "#04346d" })
hi(0, "GitSignsStagedAddLn", { bg = c.added, fg = "#04346d" })
hi(0, "GitSignsStagedAddNr", { fg = "#04346d" })
hi(0, "GitSignsStagedChange", { fg = "#4d3300" })
hi(0, "GitSignsStagedChangeCul", { fg = "#4d3300" })
hi(0, "GitSignsStagedChangeLn", { bg = c.changed, fg = "#4d3300" })
hi(0, "GitSignsStagedChangeNr", { fg = "#4d3300" })
hi(0, "GitSignsStagedChangedelete", { fg = "#4d3300" })
hi(0, "GitSignsStagedChangedeleteCul", { fg = "#4d3300" })
hi(0, "GitSignsStagedChangedeleteLn", { bg = c.changed, fg = "#4d3300" })
hi(0, "GitSignsStagedChangedeleteNr", { fg = "#4d3300" })
hi(0, "GitSignsStagedDelete", { fg = "#681217" })
hi(0, "GitSignsStagedDeleteCul", { fg = "#681217" })
hi(0, "GitSignsStagedDeleteNr", { fg = "#681217" })
hi(0, "GitSignsStagedTopdelete", { fg = "#681217" })
hi(0, "GitSignsStagedTopdeleteCul", { fg = "#681217" })
hi(0, "GitSignsStagedTopdeleteNr", { fg = "#681217" })
hi(0, "Hlargs", { fg = c.hlargs })
hi(0, "Identifier", { fg = c.fg })
hi(0, "IlluminatedWordRead", { underline = true })
hi(0, "IlluminatedWordText", { underline = true })
hi(0, "IlluminatedWordWrite", { underline = true })
hi(0, "IncSearch", { bg = c.orange, fg = c.gray })
hi(0, "Italic", { italic = true })
hi(0, "Keyword", { fg = c.keyword })
hi(0, "Label", { link = "Conditional" })
hi(0, "LineNr", { fg = c.conceal })
hi(0, "LspCodeLens", { fg = c.gray })
hi(0, "LspCodeLensSeparator", { fg = c.gray })
hi(0, "LspInlayHint", { bg = c.bg3, fg = c.gray })
hi(0, "LspReferenceRead", { bg = c.bg2 })
hi(0, "LspReferenceText", { bg = c.bg2 })
hi(0, "LspReferenceWrite", { bg = c.bg2 })
hi(0, "LspSignatureActiveParameter", { fg = "#c2e2ff" })
hi(0, "LspTroubleCount", { bg = c.gray, fg = c.purple })
hi(0, "LspTroubleNormal", { bg = c.bg1, fg = c.gray })
hi(0, "LspTroubleText", { fg = c.dark_gray })
hi(0, "MatchParen", { bg = "#bbdfff", bold = true, fg = c.fg })
hi(0, "ModeMsg", { bold = true, fg = c.warning })
hi(0, "MoreMsg", { bold = true, fg = c.info })
hi(0, "NonText", { fg = c.conceal })
hi(0, "Normal", { bg = c.bg0, fg = c.fg })
hi(0, "NormalFloat", { bg = c.bg1, fg = c.fg })
hi(0, "NormalNC", { bg = c.bg0, fg = c.fg })
hi(0, "NormalSB", { bg = c.bg1, fg = c.fg })
hi(0, "NotifyDEBUGBody", { link = "NotifyDEBUGTitle" })
hi(0, "NotifyDEBUGBorder", { link = "NotifyDEBUGTitle" })
hi(0, "NotifyDEBUGIcon", { link = "NotifyDEBUGTitle" })
hi(0, "NotifyDEBUGTitle", { fg = c.fg })
hi(0, "NotifyERRORBody", { link = "NotifyERRORTitle" })
hi(0, "NotifyERRORBorder", { link = "NotifyERRORTitle" })
hi(0, "NotifyERRORIcon", { link = "NotifyERRORTitle" })
hi(0, "NotifyERRORTitle", { fg = c.keyword })
hi(0, "NotifyINFOBody", { link = "NotifyINFOTitle" })
hi(0, "NotifyINFOBorder", { link = "NotifyINFOTitle" })
hi(0, "NotifyINFOIcon", { link = "NotifyINFOTitle" })
hi(0, "NotifyINFOTitle", { fg = c.blue })
hi(0, "NotifyTRACEBody", { link = "NotifyTRACETitle" })
hi(0, "NotifyTRACEBorder", { link = "NotifyTRACETitle" })
hi(0, "NotifyTRACEIcon", { link = "NotifyTRACETitle" })
hi(0, "NotifyTRACETitle", { fg = "#a475f9" })
hi(0, "NotifyWARNBody", { link = "NotifyWARNTitle" })
hi(0, "NotifyWARNBorder", { link = "NotifyWARNTitle" })
hi(0, "NotifyWARNIcon", { link = "NotifyWARNTitle" })
hi(0, "NotifyWARNTitle", { fg = "#4d2d00" })
hi(0, "Number", { fg = c.blue })
hi(0, "Operator", { fg = c.blue })
hi(0, "Pmenu", { bg = c.bg1, fg = c.fg })
hi(0, "PmenuSel", { bg = "#c2e2ff" })
hi(0, "PmenuThumb", { bg = c.bg2 })
hi(0, "PreProc", { fg = c.keyword })
hi(0, "Question", { link = "MoreMsg" })
hi(0, "QuickFixLine", { link = "CursorLine" })
hi(0, "Removed", { bg = c.removed, fg = c.error })
hi(0, "Repeat", { link = "Conditional" })
hi(0, "Search", { bg = "#e1d1b3" })
hi(0, "SignColumn", { fg = c.gray })
hi(0, "SignColumnSB", { link = "SignColumn" })
hi(0, "Special", { fg = c.fg })
hi(0, "SpecialKey", { link = "NonText" })
hi(0, "SpellBad", { sp = c.error, undercurl = true })
hi(0, "SpellCap", { sp = c.warning, undercurl = true })
hi(0, "SpellLocal", { sp = c.info, undercurl = true })
hi(0, "SpellRare", { sp = c.info, undercurl = true })
hi(0, "Statement", { fg = c.keyword })
hi(0, "StatusLine", { bg = "#5094e4", fg = c.bg1 })
hi(0, "StatusLineNC", { bg = c.bg0, fg = c.bg0, sp = c.bg1, underline = true })
hi(0, "Stlf6f8fa_5094e4__", { bg = "#5094e4", fg = c.bg1 })
hi(0, "String", { fg = c.dark_blue })
hi(0, "Substitute", { bg = c.error, fg = c.bg0 })
hi(0, "TabLine", { bg = c.bg3, fg = c.dark_gray })
hi(0, "TabLineFill", { bg = c.bg1 })
hi(0, "TabLineSel", { bg = c.gray, fg = c.bg0 })
hi(0, "TelescopeMatching", { link = "Search" })
hi(0, "TelescopeSelection", { link = "CursorLine" })
hi(0, "TelescopeSelectionCaret", { fg = c.info })
hi(0, "Title", { bold = true, fg = c.blue })
hi(0, "Todo", { bg = c.info, fg = c.bg0 })
hi(0, "TreesitterContext", { bg = "#ddf4ff" })
hi(0, "Type", { fg = c.red })
hi(0, "VertSplit", { fg = c.hint })
hi(0, "Visual", { bg = c.bg2 })
hi(0, "WarningMsg", { fg = c.warning })
hi(0, "Whitespace", { fg = c.bg4 })
hi(0, "WildMenu", { link = "Pmenu" })
hi(0, "WinBar", { bg = c.bg0, bold = true, fg = c.gray })
hi(0, "WinBarNC", { bg = c.bg0, bold = true, fg = c.gray })
hi(0, "WinSeparator", { fg = c.hint })
hi(0, "cssBraces", { fg = c.fg })
hi(0, "cssMedia", { link = "Keyword" })
hi(0, "cssProp", { link = "Constant" })
hi(0, "cssPseudoClassId", { link = "Function" })
hi(0, "diffAdded", { link = "Added" })
hi(0, "diffChanged", { link = "Changed" })
hi(0, "diffFile", { fg = c.info })
hi(0, "diffIndexLine", { fg = c.keyword })
hi(0, "diffLine", { fg = c.blue })
hi(0, "diffNewFile", { fg = c.hint })
hi(0, "diffOldFile", { fg = c.warning })
hi(0, "diffRemoved", { link = "Removed" })
hi(0, "htmlTag", { fg = c.blue })
hi(0, "jsonKeyword", { fg = c.blue })
hi(0, "jsonNull", { link = "Constant" })
hi(0, "lCursor", { link = "Cursor" })
hi(0, "lessAmpersand", { link = "Function" })
hi(0, "lessClass", { link = "Function" })
hi(0, "lessClassCall", { link = "Function" })
hi(0, "lessCssAttribute", { link = "Constant" })
hi(0, "lessFunction", { link = "Constant" })
hi(0, "lessVariable", { fg = c.fg })
hi(0, "luaFunction", { link = "Keyword" })
hi(0, "qfFileName", { link = "Directory" })
hi(0, "qfLineNr", { link = "LineNr" })
hi(0, "xmlAttrib", { link = "htmlTag" })
hi(0, "xmlTagName", { link = "htmlTag" })
hi(0, "yamlBlockMappingKey", { fg = c.blue })
hi(0, "yamlFlowMappingKey", { fg = c.blue })
